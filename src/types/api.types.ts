export type Winners = {
  name: string;
  wins: number;
};

export type RoomUser = {
  name: string;
  index: number | string;
};

export type Ship = {
  position: {
    x: number;
    y: number;
  };
  direction: boolean;
  length: number;
  type: ShipType;
};

export enum ShipType {
  Small = 'small',
  Medium = 'medium',
  Large = 'large',
  Huge = 'huge',
}

export enum AttackResult {
  Miss = 'miss',
  Killed = 'killed',
  Shot = 'shot',
}

export interface CommonAction {
  type: ApiMessageType;
  data: unknown;
  id: number;
}

/**Action type */
export enum ApiMessageType {
  Reg = 'reg',
  UpdateWinners = 'update_winners',
  CreateRoom = 'create_room',
  AddUserToRoom = 'add_user_to_room',
  UpdateRoom = 'update_room',
  AddShips = 'add_ships',
  StartGame = 'start_game',
  Attack = 'attack',
  RandomAttack = 'randomAttack',
  Turn = 'turn',
  Finish = 'finish',
}

export type FinishResponseData = {
  winPlayer: number | string /* id of the player in the current game session */;
};

/** Response from back on finish*/
export interface FinishResponse extends CommonAction {
  type: ApiMessageType.Finish;
  data: FinishResponseData;
}

export type TurnResponseData = {
  currentPlayer: number | string /* id of the player in the current game session */;
};

/** Response from back after game start and every attack, miss or kill result*/
export interface TurnResponse extends CommonAction {
  type: ApiMessageType.Turn;
  data: TurnResponseData;
}

export type RandomAttackRequestData = {
  gameId: number | string;
  indexPlayer: number | string /* id of the player in the current game session */;
};

/** Request from front to random attack */
export interface RandomAttackRequest extends CommonAction {
  type: ApiMessageType.RandomAttack;
  data: RandomAttackRequestData;
}

export type AttackResponseData = {
  position: {
    x: number;
    y: number;
  };
  currentPlayer: number | string /* id of the player in the current game session */;
  status: AttackResult;
};

/** Response from back result of attack */
export interface AttackResponse extends CommonAction {
  type: ApiMessageType.Attack;
  data: AttackResponseData;
}

export type AttackRequestData = {
  gameId: number | string;
  x: number;
  y: number;
  indexPlayer: number | string /* id of the player in the current game session */;
};

/** Request from front to attack */
export interface AttackRequest extends CommonAction {
  type: ApiMessageType.Attack;
  data: AttackRequestData;
}

export type StartGameResponseData = {
  ships: Ship[] /* player's ships, not enemy's */;
  currentPlayerIndex:
    | number
    | string /* id of the player in the current game session, who have sent his ships */;
};

/** Response from back to start game */
export interface StartGameResponse extends CommonAction {
  type: ApiMessageType.StartGame;
  data: StartGameResponseData;
}

export type AddShipsRequestData = {
  gameId: number | string;
  ships: Ship[];
  indexPlayer: number | string /* id of the player in the current game session */;
};

/** Request from front to add ships to the board game */
export interface AddShipsRequest extends CommonAction {
  type: ApiMessageType.AddShips;
  data: AddShipsRequestData;
}

export type UpdateRoomResponseData = {
  roomId: number | string;
  roomUsers: RoomUser[];
};

/** Response from back to update list of one player room */
export interface UpdateRoomResponse extends CommonAction {
  type: ApiMessageType.UpdateRoom;
  data: UpdateRoomResponseData[];
}

export interface AddUserToRoomRequestData {
  indexRoom: number | string;
}

/** Request from front to add user to room */
export interface AddUserToRoomRequest extends CommonAction {
  type: ApiMessageType.AddUserToRoom;
  data: AddUserToRoomRequestData;
}

/** Request from front to create room */
export interface CreateRoomRequest extends CommonAction {
  type: ApiMessageType.CreateRoom;
  data: '';
}

export interface CreateRoomData {
  idGame: number | string;
  idPlayer: number | string /* generated by server id for player in the game session, not enemy */;
}

/** Response from back after create room */
export interface CreateRoomResponse extends CommonAction {
  type: ApiMessageType.CreateRoom;
  data: CreateRoomData;
}

export interface RegRequestData {
  name: string;
  password: string;
}

/** Request from front to create/login user */
export interface RegRequest extends CommonAction {
  type: ApiMessageType.Reg;
  data: RegRequestData;
}

export interface RegResponseData {
  name: string;
  password: string;
  error: boolean;
  errorText: string;
}

/** Response from back after create/login user */
export interface RegResponse extends CommonAction {
  type: ApiMessageType.Reg;
  data: RegResponseData;
}

/** Response to front to update winners list */
export interface UpdateWinnersResponse extends CommonAction {
  type: ApiMessageType.UpdateWinners;
  data: Winners[];
}
